name: 🚀 Deploy

on:
  push:
    branches:
      - main
      - dev
  pull_request: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  actions: write
  contents: read

jobs:
  lint:
    name: ⬣ ESLint
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - name: 📥 Download deps
        uses: ./.github/actions/pnpm-setup

      - name: 🔬 Lint
        run: |
          pnpm format:check
          pnpm nx run-many --target=lint,build --all --parallel --maxParallel=4

  # typecheck:
  #   name: ʦ TypeScript
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: ⬇️ Checkout repo
  #       uses: actions/checkout@v3

  #     - name: 📥 Download deps
  #       uses: ./.github/actions/pnpm-setup

  #     - name: 🖼 Build icons
  #       run: npm run build:icons

  #     - name: 🔎 Type check
  #       run: npm run typecheck --if-present

  # vitest:
  #   name: ⚡ Vitest
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: ⬇️ Checkout repo
  #       uses: actions/checkout@v3

  #     - name: 📥 Download deps
  #       uses: ./.github/actions/pnpm-setup

  #     - name: 🏄 Copy test env vars
  #       run: cp .env.example .env

  #     - name: 🖼 Build icons
  #       run: npm run build:icons

  #     - name: ⚡ Run vitest
  #       run: npm run test -- --coverage

  # playwright:
  #   name: 🎭 Playwright
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60
  #   steps:
  #     - name: ⬇️ Checkout repo
  #       uses: actions/checkout@v3

  #     - name: 📥 Download deps
  #       uses: ./.github/actions/pnpm-setup

  #     - name: 🏄 Copy test env vars
  #       run: cp .env.example .env

  #     - name: 📥 Install Playwright Browsers
  #       run: npm run test:e2e:install

  #     - name: 🛠 Setup Database
  #       run: npx prisma migrate deploy

  #     - name: 🏦 Cache Database
  #       id: db-cache
  #       uses: actions/cache@v3
  #       with:
  #         path: prisma/data.db
  #         key: db-cache

  #     - name: 🏗 Build
  #       run: npm run build

  #     - name: 🎭 Playwright tests
  #       run: npx playwright test

  #     - name: 📊 Upload report
  #       uses: actions/upload-artifact@v3
  #       if: always()
  #       with:
  #         name: playwright-report
  #         path: playwright-report/
  #         retention-days: 30

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    # needs: [lint, typecheck, vitest, playwright]
    needs: [lint]
    # only build/deploy main branch on pushes
    if:
      ${{ (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev') &&
      github.event_name == 'push' }}

    steps:
      - name: ⬇️ Checkout repo
        uses: actions/checkout@v3

      - name: 👀 Read app name
        uses: SebRollen/toml-action@v1.0.2
        id: app_name
        with:
          file: './apps/web/fly.toml'
          field: 'app'

      # move Dockerfile to root
      # - name: 🚚 Move Dockerfile
      #   run: |
      #     mv ./other/Dockerfile ./Dockerfile
      #     mv ./other/.dockerignore ./.dockerignore

      - name: 🚀 Deploy Staging
        if: ${{ github.ref == 'refs/heads/dev' }}
        uses: superfly/flyctl-actions@1.4
        with:
          args:
            'deploy --config ./apps/web/fly.toml --dockerfile ./apps/web/Dockerfile --remote-only --build-arg COMMIT_SHA=${{ github.sha }} --app
            ${{ steps.app_name.outputs.value }}-staging'
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: 🚀 Deploy Production
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: superfly/flyctl-actions@1.4
        with:
          args: 'deploy --config ./apps/web/fly.toml --dockerfile ./apps/web/Dockerfile --remote-only --build-arg COMMIT_SHA=${{ github.sha }}'
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
